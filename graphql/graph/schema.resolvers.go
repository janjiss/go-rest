package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"janjiss.com/rest/graphql/graph/model"
	"janjiss.com/rest/users"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.CreateUserPayload, error) {
	var user *users.User
	var err error

	user, err = r.UserService.CreateUser(input.Name, input.Email)

	if err != nil {
		fmt.Printf("Error: %v", err)
		return nil, err
	}

	return &model.CreateUserPayload{
		User: &model.User{
			ID:    user.ID.String(),
			Email: user.Email,
			Name:  user.Name,
		},
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginPayload, error) {
	var response *model.LoginPayload

	token, err := r.UserService.Login(input.Email)

	if err != nil {
		return nil, err
	}

	response = &model.LoginPayload{
		Token: token,
	}

	return response, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var usersResponse []*model.User
	users, err := r.UserService.GetAllUsers("")

	if err != nil {
		return nil, err
	}

	for _, user := range users {
		usersResponse = append(usersResponse, &model.User{
			ID:    user.ID.String(),
			Email: user.Email,
			Name:  user.Name,
		})
	}

	return usersResponse, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
